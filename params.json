{
  "name": "Node6es2015",
  "tagline": "ES2015 examples for Node 6",
  "body": "# Repo for the May 2016 JaxNode meetup examples\r\n\r\nThis repo contains the examples from the JaxNode May 2016 presentation.\r\nYou can view the [slides](http://slides.com/davidfekke/node6docker#/  target=\"blank\") for this presentation\r\nat [slides.com/davidfekke/node6docker](http://slides.com/davidfekke/node6docker#/  target=\"blank\").\r\n\r\n## Random\r\n\r\nThe `Math.random()` function has been greatly improved. This will be important for authors of security modules that depend on \r\ngood random algorythms.\r\n\r\n```javascript\r\nvar ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\r\n\r\nconst random_base64 = function random_base64(length) {\r\n    var str = \"\";\r\n    for (var i=0; i < length; ++i) {\r\n        var rand = Math.floor(Math.random() * ALPHABET.length);\r\n        str += ALPHABET.substring(rand, rand+1);\r\n    }\r\n    return str;\r\n}\r\n\r\nconsole.log(random_base64(23));\r\n```\r\n\r\n## Default Parameters\r\n\r\nES2015 has given us the capability of using default paramters. This is a popular feature in other languages. \r\nNow JavaScript developers have this feature.\r\n\r\n```javascript\r\nfunction add(a, b = 0) {\r\n\treturn a + b;\r\n}\r\n``` \r\n\r\n## Rest parameter\r\n\r\nThe rest parameter gives developers a way of denoting when you plan on passing an array of arguments to a function.\r\n\r\n```javascript\r\nfunction listAnimalsES2015(...animals) {\r\n  animals.forEach(item => {\r\n    console.log(item);\r\n  });\r\n}\r\n\r\nlistAnimalsES2015('dog', 'cat', 'platipus');\r\n```\r\n\r\n## Spread operator\r\n\r\nThe spread operator gives developers a cleaner way of concatinating arrays.\r\n\r\n```javascript\r\nvar parts = ['shoulders', 'knees'];\r\nvar lyrics = ['head', ...parts, 'and', 'toes']; \r\n```\r\n\r\n## Destructuring\r\n\r\nDestructuring is one of the more powerful features in ES2015. Developers have simpler way of assigning left hand values from a more complex object.\r\n\r\n```javascript\r\nvar foo = [\"one\", \"two\", \"three\"];\r\n\r\nvar [one, two, three] = foo;\r\n```\r\n\r\n## new.target\r\n\r\nThis property allows developers to limit the use of the `new` keyword or inforce its use.\r\n\r\n```javascript\r\nfunction Foo() {\r\n  if (!new.target) \r\n    throw 'Foo() must be called with new';\r\n  console.log('Foo instantiated with new');\r\n}\r\n\r\nnew Foo(); // logs \"Foo instantiated with new\"\r\nFoo(); // throws \"Foo() must be called with new\"\r\n```\r\n\r\n## Reflection\r\n\r\nES2015 adds an improved reflection API to JavaScript.\r\n\r\n```javascript\r\nvar O = {a: 1};\r\nObject.defineProperty(O, 'b', {value: 2});\r\nO[Symbol('c')] = 3;\r\n\r\nReflect.ownKeys(O); // ['a', 'b', Symbol(c)]\r\n\r\nfunction C(a, b){\r\n  this.c = a + b;\r\n}\r\nvar instance = Reflect.construct(C, [20, 22]);\r\nconsole.log(instance.c);\r\n```\r\n\r\n## Proxy objects\r\n\r\nProxy objects allows developers to override the default meta data functions in the reflection API.\r\n\r\n```javascript\r\nvar handler = {\r\n    get: function(target, name){\r\n        return name in target?\r\n            target[name] :\r\n            37;\r\n    }\r\n};\r\n\r\nvar p = new Proxy({}, handler);\r\np.a = 1;\r\np.b = undefined;\r\n\r\nconsole.log(p.a, p.b);\r\nconsole.log('c' in p, p.c);\r\n```\r\n\r\n## Symbol\r\n\r\nES2015 also adds a Symbol object for creating unique values that can be used as keys in structures.\r\n\r\n```javascript\r\nconsole.log(Symbol('foo') === Symbol('foo'));\r\nconsole.log(Symbol('bar') !== Symbol('bar'));\r\n```\r\n\r\nCopyright JaxNode 2016",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}